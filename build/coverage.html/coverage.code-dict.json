{"/home/travis/build/npmtest/node-npmtest-xbox-controller/test.js":"/* istanbul instrument in package npmtest_xbox_controller */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xbox-controller/lib.npmtest_xbox_controller.js":"/* istanbul instrument in package npmtest_xbox_controller */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xbox_controller = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xbox_controller = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xbox-controller/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xbox-controller && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xbox_controller */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xbox_controller\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xbox_controller.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xbox_controller.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xbox_controller.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xbox_controller.__dirname + '/lib.npmtest_xbox_controller.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xbox-controller/node_modules/xbox-controller/lib/xbox.js":"var HID = require('node-hid'),\n  util = require('util'),\n  chalk = require('chalk'),\n  events = require('events'),\n  fs = require('fs'),\n  path = require('path'),\n  triggers = require('./triggers.json'),\n  buttons = require('./buttons.json'),\n  within = require('./mixins/within'),\n  __ = require('lodash'),\n  joysticks = require('./joysticks.json');\n\n\nvar dead = 6000;\n\nfunction uint8Toint16(low, high) {\n  var buffer = new ArrayBuffer(4);\n  var int8View = new Uint8Array(buffer);\n  var int16View = new Int16Array(buffer);\n\n  int8View[0] = low;\n  int8View[1] = high;\n  return int16View[0];\n}\n\nfunction XboxController(serialNumber) {\n  \n  if( serialNumber) {\n    this.serialNumber = serialNumber.toUpperCase();\n  }\n  \n  this.position = 0;\n\n  for (var button in buttons) {\n    this[button] = 0;\n  }\n  for (var trigger in triggers) {\n    this[trigger] = 0;\n  }\n  this.leftx = 0;\n  this.lefty = 0;\n  this.rightx = 0;\n  this.righty = 0;\n  this.hid = false;\n  this._controllerLoadingInterval = false;\n  this.loadController();\n}\n\nvar location, bufferStore = [],\n  original = 1,\n  count = 0;\n\nXboxController.analyze = function analyze(key, type, axis) {\n  if (original === 1) {\n    original = bufferStore[bufferStore.length - 1];\n  }\n  if (type === 'key') {\n    for (i = 0; i < bufferStore.length; i++) {\n      for (n = 0; n < bufferStore[i].length; n++) {\n        if (bufferStore[i][n] !== original[n]) {\n          buttons[key].block = n;\n          buttons[key].bitwise = parseInt(\"0x\" + parseInt(bufferStore[i][n].toString(16), 10), 16);\n          bufferStore = [];\n          console.log(buttons[key].block, buttons[key].bitwise, bufferStore);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n      }\n    }\n  } else if (type === 'trigger') {\n    for (i = 0; i < bufferStore.length; i++) {\n      for (n = 0; n < bufferStore[i].length; n++) {\n        var current = bufferStore[i][n];\n        if (current !== original[n] && current !== 128 && current !== 0) {\n          console.log(bufferStore[bufferStore.length - 1][n]);\n          triggers[key].block = n;\n          bufferStore = [];\n          console.log(triggers[key].block, bufferStore);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n      }\n    }\n  } else if (type === 'joystick') {\n    for (i = 0; i < bufferStore.length; i++) {\n      for (n = 0; n < bufferStore[i].length; n++) {\n        var current = bufferStore[i][n],\n          diffx = bufferStore[i][n] - original[n],\n          diffy = original[n] - bufferStore[i][n];\n        if (current !== original[n] && axis === 'leftx' && diffx > 70) {\n          joysticks.leftxPos = n;\n          joysticks.leftxState = (n - 1);\n          bufferStore = [];\n          console.log(joysticks.leftxPos, joysticks.leftxState);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n        if (current !== original[n] && axis === 'rightx' && diffx > 70) {\n          joysticks.rightxPos = n;\n          joysticks.rightxState = (n - 1);\n          bufferStore = [];\n          console.log(joysticks.rightxPos, joysticks.rightxState);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n        if (current !== original[n] && axis === 'lefty' && diffy > 70) {\n          joysticks.leftyPos = n;\n          joysticks.leftyState = (n - 1);\n          bufferStore = [];\n          console.log(joysticks.leftyPos, joysticks.leftyState);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n        if (current !== original[n] && axis === 'righty' && diffy > 70) {\n          joysticks.rightyPos = n;\n          joysticks.rightyState = (n - 1);\n          bufferStore = [];\n          console.log(joysticks.rightyPos, joysticks.rightyState);\n          count += 1;\n          XboxController.configure();\n          break;\n        }\n      }\n    }\n  }\n};\n\nXboxController.reader = function read(key, inputLength, type, axis) {\n  location.read(onRead = function (err, data) {\n    bufferStore.push(data);\n    if (bufferStore.length < inputLength) {\n      location.read(onRead);\n    } else {\n      XboxController.analyze(key, type, axis);\n    }\n  });\n};\n\nXboxController.configure = function () {\n  switch (count) {\n  case 0:\n    console.log('Press and release the A button');\n    XboxController.reader('a', 2, 'key', 0);\n    break;\n  case 1:\n    console.log('Press and release the Y Button');\n    XboxController.reader('y', 2, 'key', 0);\n    break;\n  case 2:\n    console.log('Press and release the B Button');\n    XboxController.reader('b', 2, 'key', 0);\n    break;\n  case 3:\n    console.log('Press and release the X Button');\n    XboxController.reader('x', 2, 'key', 0);\n    break;\n  case 4:\n    console.log('Press and release the Left Shoulder');\n    XboxController.reader('leftshoulder', 2, 'key', 0);\n    break;\n  case 5:\n    console.log('Press and release the Right Shoulder');\n    XboxController.reader('rightshoulder', 2, 'key', 0);\n    break;\n  case 6:\n    console.log('Press and release D-pad up', 'key');\n    XboxController.reader('dup', 2, 'key', 0);\n    break;\n  case 7:\n    console.log('Press and release D-pad down');\n    XboxController.reader('ddown', 2, 'key', 0);\n    break;\n  case 8:\n    console.log('Press and release D-pad left');\n    XboxController.reader('dleft', 2, 'key', 0);\n    break;\n  case 9:\n    console.log('Press and release D-pad right');\n    XboxController.reader('dright', 2, 'key', 0);\n    break;\n  case 10:\n    console.log('Press and release the left stick button');\n    XboxController.reader('leftstick', 2, 'key', 0);\n    break;\n  case 11:\n    console.log('Press and release the right stick button');\n    XboxController.reader('rightstick', 2, 'key', 0);\n    break;\n  case 12:\n    console.log('Press and release the start button');\n    XboxController.reader('start', 2, 'key', 0);\n    break;\n  case 13:\n    console.log('Press and release the back button');\n    XboxController.reader('back', 2, 'key', 0);\n    break;\n  case 14:\n    console.log('Wiggle the right trigger');\n    XboxController.reader('right', 50, 'trigger', 0);\n    break;\n  case 15:\n    console.log('Wiggle the left trigger');\n    XboxController.reader('left', 50, 'trigger', 0);\n    break;\n  case 16:\n    console.log('Keep wiggling the left trigger');\n    XboxController.reader('left', 50, 'trigger', 0);\n    break;\n  case 17:\n    console.log('Move the left joystick a bit to the right');\n    XboxController.reader('left', 200, 'joystick', 'leftx');\n    break;\n  case 18:\n    console.log('Keep moving the left joystick a bit to the right');\n    XboxController.reader('left', 200, 'joystick', 'leftx');\n    break;\n  case 19:\n    console.log('Move the right joystick a bit to the right');\n    XboxController.reader('left', 200, 'joystick', 'rightx');\n    break;\n  case 20:\n    console.log('Keep moving the right joystick a bit to the right');\n    XboxController.reader('left', 200, 'joystick', 'rightx');\n    break;\n  case 21:\n    console.log('Move the right joystick upwards a bit');\n    XboxController.reader('left', 200, 'joystick', 'righty');\n    break;\n  case 22:\n    console.log('Keep moving the right joystick upwards a bit');\n    XboxController.reader('left', 200, 'joystick', 'righty');\n    break;\n  case 23:\n    console.log('Move the left joystick upwards a bit');\n    XboxController.reader('left', 200, 'joystick', 'lefty');\n    break;\n  case 24:\n    console.log('Keep moving the left joystick upwards a bit');\n    XboxController.reader('left', 200, 'joystick', 'lefty');\n    break;\n  case 25:\n    var joysticksDir = path.join(__dirname, 'joysticks.json'),\n      triggersDir = path.join(__dirname, 'triggers.json'),\n      buttonsDir = path.join(__dirname, 'buttons.json');\n    var configArray = [joysticksDir, triggersDir, buttonsDir],\n      nameArray = [joysticks, triggers, buttons];\n    for (i = 0; i < configArray.length; i++) {\n      fs.writeFile(configArray[i], JSON.stringify(nameArray[i], null, 4), function (err) {\n        if (err) throw err;\n        console.log('Saved' + nameArray[i])\n      });\n    }\n    console.log('Config complete');\n    break;\n  default:\n    console.log('error try again');\n  }\n};\n\nutil.inherits(XboxController, events.EventEmitter);\n\nXboxController.prototype.loadController = function () {\n\n  HID.devices().forEach((function (d) {\n  \n    \n  try {\n    if( this.serialNumber )\n    {  \n      // If the serial number is set, look for device with that serial number.\n      var deviceSerialNumber = (typeof d === 'object' && d.serialNumber) || '';\n    \n      if (deviceSerialNumber.indexOf(this.serialNumber) !== -1) {\n        console.log(chalk.green('notice: '), 'serial number found.');     \n        this.hid = new HID.HID(d.path);\n        console.log(chalk.green('notice: '), 'Xbox controller connected (serial number: ' \n        + d.serialNumber + ', path: ' + d.path + ')');\n        this.emit('connected');\n        location = this.hid;\n      }\n    } else {\n      // The serial number is not set, grab the first device.\n      var product = (typeof d === 'object' && d.product) || '';\n      if (product.toLowerCase().indexOf('controller') !== -1) {\n        this.hid = new HID.HID(d.path);        \n        console.log(chalk.green('notice: '), 'Xbox controller connected (serial number: ' \n        + d.serialNumber + ', path: ' + d.path + ')');\n        this.serialNumber = d.serialNumber;\n        this.emit('connected');\n        location = this.hid;\n      }\n    }\n  } catch (ex) {\n    console.log(chalk.green('notice: '), 'Xbox controller already in use (serial number: ' \n        + d.serialNumber + ', path: ' + d.path + ')' );\n  }\n    \n  }).bind(this));\n\n  if (this.hid === false && !this._controllerLoadingInterval) {\n    this._controllerLoadingInterval = setInterval(function () {\n      this.loadController();\n    }.bind(this), 2000);\n  }\n\n  try {\n    this.hid.read(this.interpretData.bind(this));\n  } catch (ex) {\n    console.log(chalk.red('error: '), 'Xbox controller could not be found.');\n    this.emit('not-found');\n  }\n\n};\n\nXboxController.prototype.interpretData = function (error, data) {\n  if (error && this.hid) {\n    console.log(chalk.red('error:'), error);\n    this.hid = false;\n    this.loadController();\n    return false;\n  } else {\n    clearInterval(this._controllerLoadingInterval);\n    this._controllerLoadingInterval = false;\n  }\n\n  for (var key in buttons) {\n    var address = buttons[key];\n    var state = data[address.block] & address.bitwise;\n\n    if (state ^ this[key]) {\n      this.emit((state ? key + ':press' : key + ':release'), key);\n      this[key] = state;\n    }\n  }\n\n  for (var trigger in triggers) {\n    var address = triggers[trigger];\n    var state = data[address.block];\n    if (state ^ this[trigger]) {\n      this.emit(trigger + 'trigger', state);\n      this[trigger] = state;\n    }\n  }\n\n  var leftx = uint8Toint16(data[joysticks.leftxState], data[joysticks.leftxPos]);\n  var lefty = uint8Toint16(data[joysticks.leftyState], data[joysticks.leftyPos]);\n\n  if (leftx ^ this.leftx | lefty ^ this.lefty) {\n    if (leftx > -1 * dead && leftx < dead) {\n      leftx = 0;\n    }\n    if (lefty > -1 * dead && lefty < dead) {\n      lefty = 0;\n    }\n\n    this.emit('left:move', {\n      x: leftx,\n      y: lefty\n    });\n    this.leftx = leftx;\n    this.lefty = lefty;\n  }\n\n  var rightx = uint8Toint16(data[joysticks.rightxState], data[joysticks.rightxPos]);\n  var righty = uint8Toint16(data[joysticks.rightyState], data[joysticks.rightyPos]);\n\n  if (rightx ^ this.rightx | righty ^ this.righty) {\n    if (rightx > -1 * dead && rightx < dead) {\n      rightx = 0;\n    }\n    if (righty > -1 * dead && righty < dead) {\n      righty = 0;\n    }\n    this.emit('right:move', {\n      x: rightx,\n      y: righty\n    });\n    this.rightx = rightx;\n    this.righty = righty;\n  }\n\n  this.hid.read(this.interpretData.bind(this));\n};\n\n\nXboxController.prototype.sendCommand = function (command, errorMsg) {\n  try {\n    this.hid.write(command);\n  } catch (ex) {\n    console.log(chalk.red('error: '), errorMsg);\n  }\n};\n\n/*\n\nPattern  Description\n0x00   All off\n0x01   All blinking\n0x02   1 flashes, then on\n0x03   2 flashes, then on\n0x04   3 flashes, then on\n0x05   4 flashes, then on\n0x06   1 on\n0x07   2 on\n0x08   3 on\n0x09   4 on\n0x0A   Rotating (e.g. 1-2-4-3)\n0x0B   Blinking*\n0x0C   Slow blinking*\n0x0D   Alternating (e.g. 1+4-2+3), then back to previous*\n\n */\n// input one of the patterns abov\nXboxController.prototype.setLed = function (flag) {\n  this.sendCommand([0x01, 0x03, flag], 'Xbox cant set LED to HEX ' + flag);\n};\n\nXboxController.prototype.powerOff = function () {\n  this.sendCommand([0x02, 0x02], 'Xbox controller wont poweroff');\n};\n\nXboxController.prototype.rumble = function (left, right) {\n  if (typeof left === \"undefined\" || left === null) {\n    left = 0xff;\n  }\n  if (typeof right === \"undefined\" || right === null) {\n    right = 0xff;\n  }\n  this.sendCommand([0x00, 0x00, 0x04, left, right], 'Xbox controller wont rumble');\n};\n\n__.mixin(XboxController.prototype, within);\n\nmodule.exports = XboxController;\n","/home/travis/build/npmtest/node-npmtest-xbox-controller/node_modules/xbox-controller/lib/mixins/within.js":"var mixins = {\n\n  within: function(eventName, range, callback) {\n    var upper;\n\n    if (typeof range === \"number\") {\n      upper = range;\n      range = [0, upper];\n    }\n\n    if (!Array.isArray(range)) {\n      this.emit(\"error\", {\n        message: \"range must be an array\"\n      });\n      return;\n    }\n\n    this.on(eventName , function(value){\n      if (value >= range[0] && value <= range[1]) {\n        callback.call(this, null, value);\n      }\n    }.bind(this));\n\n    return this;\n  }\n};\n\nmodule.exports = mixins;\n"}